Signing
#######

.toc

Introduction
============

**elfsigner** is command-line utility used to generate digital signatures for
aDSP dynamic shared objects and to generate test signatures (TestSigs) for
facilitating development. Dynamic shared objects are required to be digitally
signed and then authenticated at runtime before they are allowed to be loaded
and executed.

**elfsigner** comes configured with a test private key and root certificate,
which provides for generating signatures for dynamic modules that will be run
on a device configured with the same test root certificate.

The **elfsigner** utility is implemented as a set of Python scripts, and as such
requires that Python version 2.7 or above is installed on the host computer.

TestSigs
========

A TestSig is a special type of dynamic shared object that when properly
installed on a device, enables that device for development use by overriding
the authentication requirement of other dynamic shared objects.  This
eliminates the need for signing individual shared objects allowing for faster
development cycles.

The TestSig is a shared object named `testsig-XXXXXXXX.so` which contains a
serial number corresponding to the specific device which it will be installed on.
It must be signed by **elfsigner** with a command-line option that passes the
device serial number to the TestSig.


Using elfsigner
===============

Dependencies
------------

Before calling ELFSigner ensure the SDK's dependencies are properly setup.
The installer should have done this for you.  If you encounter issues please see
[Dependencies] (Dependencies_Common.html).

Calling ELFSigner requires that the local environment be setup.  To do this call
the windows command file before using the sdk.

. setup_sdk_env.cmd

This file will setup the shell-local environment only.

Elfsigner uses temporary folder as a scratch space to create intermediate output.
Please ensure that the tool has permission to write to that directory.
. Windows location: %tempt% (This is an environment variable)

Command-line usage
------------------

ELFSigner is located at:

. /tools/elfsigner/elfsigner.py

There are two basic command-line forms for invoking **elfsigner**:

. python elfsigner.py -t SERIALNUM -o [OUTPUTDIR]
.
.    SERIALNUM is a 32-bit device serial number in hex form: 0xabcd0123

In this form, a TestSig is generated and written to the OUTPUTDIR directory. No
files are specified on the command line. The output filename is generated by
concatenating 'testsig-' with the serial number value in hexadecimal, followed
by the extension '.so'.
For example: using `-t 0xaf0123` will create a file named: `testsig-0xaf0123.so.`

. python elfsigner.py -i INFILE -o [OUTDIR]
.
.    INFILE is the pathname of an ELF format shared object file to be signed.
.    OUTDIR specifies the output folder's pathname of the signed output file.

In this form, **elfsigner** produces a signed ELF file from an unsigned input file.
A single file may be signed at each invocation. In its simplest form, OUTFILE
may be omitted, in which case the signed output file is written to the current
directory using the same name as the input file.  If there is a naming conflict
where the input file would be overwritten by the output file then the output
file will be named *{input_filename_base}*_signed.so.


Options
.......

For help with elfsigner options and usage, please type
. python elfsigner.py -h

Commonly used  options are:

* **`--testsig=SERIALNUM, or -t SERIALNUM`**
   Generate a test signature tied to a device with the specified serial
   number. The serial number is a 32-bit number expressed in hexadecimal:
   such as `0x10203040`

   The device serial number can be obtained by running the tool **getserial**
   from an adb shell.  See section [[Obtaining Device Serial Number]] below.

* **`--version`**
   Display the version number and exit.

* **`--help or -h`**
   Display a help message and exit.


Usage Examples
--------------

. python elfsigner.py --help

Displays a help screen and exits


. python elfsigner.py --version

Displays the version number and exits.


. python elfsigner.py --testsig=0xabcdef01

Creates a TestSig in the current directory with the name: `testsig-0xabcdef01.so`,
containing a serial number of 0xabcdef01.


. python elfsigner.py -i dynmod.so -o signed/

Signs the input file `dynmod.so` writes the signed output file to `./signed/dynmod.so`


. python elfsigner.py -i input/dynmod.so -o signed/

This command signs the input file `./input/dynmod.so` and writes the signed
output file to `./signed/dynmod.so`


Obtaining Device Serial Number
==============================

Android
-------

Use the command line Android application **getserial** to discover the serial number of your
device. This utility is located in the *elfsigner* folder of the Hexagon&#8482;
SDK.  To obtain the serial number from commad line, the device needs to be connected to the host PC to run adb commands.
Please refer the documentation [connect to device] (Debugging_Connect to Device.html) for details.

Usage of getserial is shown below.

Flash the **getserial** application to the device (via **adb**)

. adb push <local_path>/getserial /data/getserial

Set the execute bit on the application

. adb shell chmod 755 /data/getserial

Execute the application to retrieve the serial number

. adb shell /data/getserial

The above command returns the serial number of the attached device:

. ####################Serial number (see below)###########################
.
. Serial Num : 0x13eb80
.
. ####################Serial number (see above)###########################


Alternatively **GetSerial**, a GUI based android application, can also be used to retrieve the device's serial number.
This application is also located in the *elfsigner* folder.
Connect the device to your host PC and run the following command

.ccode

   <Hexagon SDK Dir>\tools\elfsigner>adb install getserial.apk
   1631 KB/s (2464266 bytes in 1.475s)
         pkg: /data/local/tmp/getserial.apk
   Success

**GetSerial** can be directly run from your device's GUI. The connection to the host PC is not required while running the GUI based application.

Windows Phone
-------------

Use the command line Windows application **getserial.exe** to discover the serial number of your
device. This utility is located in the *elfsigner* folder of the Hexagon&#8482;
SDK.  Usage is shown below.

Push the **getserial.exe** application to the device (via **TShell**)

. cdd C:\Data\test\bin
. putd <Hexagon SDK Dir>\tools\elfsigner\getserial.exe

Execute the application to retrieve the serial number

. execd getserial.exe

The above command returns the serial number of the attached device:

. ####################Serial number (see below)###########################
.
. Serial Num : 0x13eb80
.
. ####################Serial number (see above)###########################

Installing the TestSig on Device
================================

TestSigs, after being generated with the correct device serial number,
should be loaded into the root of the remote file system or other location as
specified by the environment variable ADSP_LIBRARY_PATH.  (See the
[Remote File System] (remote_file_system.html) section for more information).

The TestSig produced by **elfsigner** will be named `testsig-0xXXXXX`, where
`XXXXX` is the serial number specified on the command line.

Signature test mode is latched.  This means that after reboot, test signatures
are validated only once on the first call to load a dynamic object.  Therefore
after you copy the test signature to the device its a good idea to reboot the
device so it gets recognized.

Installation Example
--------------------

In this example the device serial number is 0x12345 and the previously
generated TestSig is named `testsig-0x12345.so`. The environment variable
ADSP_LIBRARY_PATH is set to: `ADSP_LIBRARY_PATH=/data/adsp`.

Android
.......

Use **adb** to push the TestSig onto the device:

. adb push testsig-0x12345.so /data/adsp/testsig-0x12345.so

Windows Phone
.............

Use **TShell** to push the TestSig onto the device:

. putd testsig-0x12345.so C:\Windows\System32

Walk-through
============

On Android
----------

- First discover your device's serial number.  The below steps will print out
  the device serial number.  Example: 0x12345678

  . adb push <Hexagon SDK Dir>\tools\elfsigner\getserial /data/
  . adb shell chmod 777 /data/getserial
  . adb shell /data/getserial

- Next generate a test signature based on that serial number and push it
  to the device.  The test signature is discovered on boot so a reboot is required.

  . cd <Hexagon SDK Dir>
  . setup_sdk_env.cmd
  . python <Hexagon SDK Dir>\tools\elfsigner\elfsigner.py -t 0x<serial number>
  . adb push output/testsig-0x<serial number> /system/lib/rfsa/adsp/
  . adb reboot
  . adb wait-for-device

- The above steps are captured in the following script:

  . <Hexagon SDK Dir>\tools\scripts\testsig.cmd

On Windows Phone
----------------

- First discover your device's serial number.  The below steps will print out
  the device serial number.  Example: 0x12345678. Run commands from **TShell**.

  . cdd C:\Data\test\bin
  . putd <Hexagon SDK Dir>\tools\elfsigner\getserial.exe
  . execd getserial.exe

- Next generate a test signature based on that serial number and push it
  to the device.

  . cd <Hexagon SDK Dir>
  . .\setup_sdk_env.cmd
  . python <Hexagon SDK Dir>\tools\elfsigner\elfsigner.py -t 0x<serial number>
  . putd testsig-0x<serial number>.so C:\Windows\System32

- Reboot the phone. The test signature is discovered on boot so a reboot is required.

Production-Signing
============

Signatures generated using the elfsigner from the SDK allow SDK users to prototype 
and test their software on debug devices such as Dragon Boards. However these 
testsigs and signed .so files would not authenticate successfully on production 
devices such as OEM phones and tablets. 

To enable a .so  to be successfully deployed on production devices across
a large number of OEM devices, the dynamic module needs to be production signed by 
the OEM. ISVs are encouraged to work with their OEM POCs to have the modules production
signed for OEM devices.
